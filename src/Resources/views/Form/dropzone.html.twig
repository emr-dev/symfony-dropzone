{% block dropzone_widget %}
    {{ block('form_widget') }}
    <script>
        (function () {
            let dropzoneId = '{{ id|default(0) }}_dropzone';
            let dropzoneElement = document.getElementById(dropzoneId);
            function initPrototype(id) {
                element = document.createElement('input');
                element.type = 'hidden';
                {% if not multiple %}
                   element.name = 'interest[{{ name }}][dropzone]';
                {% else %}
                   element.name = 'interest[{{ name }}][dropzone][]';
                {% endif %}
                element.value = id;
                dropzoneElement.closest('.form-group').append(element);
            }
            options = {};
            {% if maxFiles %}
              options.maxFiles = {{ maxFiles }};
            {% endif %}
            {% if method %}
              options.method = '{{ method }}';
            {% endif %}
            {% if withCredentials %}
              options.withCredentials = {{ withCredentials }};
            {% endif %}
            {% if thumbnailWidth %}
              options.thumbnailWidth = {{ thumbnailWidth }};
            {% endif %}
            {% if thumbnailHeight %}
              options.thumbnailHeight = {{ thumbnailHeight }};
            {% endif %}
            {% if thumbnailMethod %}
              options.thumbnailMethod = '{{ thumbnailMethod }}';
            {% endif %}
            {% if resizeWidth %}
              options.resizeWidth = {{ resizeWidth }};
            {% endif %}
            {% if resizeHeight %}
              options.resizeHeight = {{ resizeHeight }};
            {% endif %}
            {% if resizeMimeType %}
              options.resizeMimeType = {{ resizeMimeType }};
            {% endif %}
            {% if resizeMethod %}
              options.resizeMethod = '{{ resizeMethod }}';
            {% endif %}
            {% if filesizeBase %}
              options.filesizeBase = {{ filesizeBase }};
            {% endif %}
            {% if headers is iterable %}
                header_object = {};
                {% for key,value in headers %}
                var key = '{{ key }}';
                header_object[key] = '{{ value }}';
                {% endfor %}
                options.headers = header_object;
            {% endif %}
            {% if ignoreHiddenFiles %}
              options.ignoreHiddenFiles = {{ ignoreHiddenFiles }};
            {% endif %}
            {% if acceptedFiles %}
              options.acceptedFiles = '{{ acceptedFiles }}';
            {% endif %}
            {% if autoProcessQueue %}
              options.autoProcessQueue = {{ autoProcessQueue }};
            {% endif %}
            {% if autoQueue %}
              options.autoQueue = {{ autoQueue }};
            {% endif %}
            {% if addRemoveLinks %}
              options.addRemoveLinks = {{ addRemoveLinks }};
            {% endif %}
            {% if previewsContainer %}
              options.previewsContainer = '{{ previewsContainer }}';
            {% endif %}
            let myDropzone = new Dropzone(dropzoneElement, {
                url: '{{ path(uploadHandler) }}',
                ...options,
                init: function () {
                    var myDropzone = this;
                    {% for file in files %}
                       src = '{{ attribute(file, choice_src)}}';
                        var mockFile = {
                            id: '{{ file.id }}',
                            name: '{{ file.filename }}',
                            size: '{{ file.size }}',
                            type: '{{ file.mimetype }}',
                            status: Dropzone.ADDED,
                            url: src
                        };
                        myDropzone.emit("addedfile", mockFile);
                        myDropzone.emit("thumbnail", mockFile, src);
                        myDropzone.emit("complete", mockFile);
                        myDropzone.files.push(mockFile);
                       initPrototype('{{ file.id }}');
                    {% endfor %}

                    this.on('success', function (file, result) {
                        if (result.id) {
                            file.id = result.id;
                            initPrototype(result.id);
                        }
                    });
                },
                sending: function(file, xhr, formData){
                    {% if headers is iterable %}
                        {% for key,value in formData %}
                        formData.append('{{ key }}', '{{ value }}');
                        {% endfor %}
                    {% endif %}
                },
                removedfile: function (file) {
                    if (file.id) {
                        uri = '{{ path(removeHandler,{'id': 'file_id' }) }}';
                        fetch(uri.replace("file_id", file.id))
                    }
                    file.previewElement.remove();
                }
            });
        })();
    </script>

{% endblock %}